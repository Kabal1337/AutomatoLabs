//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//


//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s): 
//
// State Map
//	This state map is recognizes the regular expression 0*1*.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.5  2005/05/28 13:31:16  cwrapp
// Updated C++ examples.
//
// Revision 1.1  2005/02/21 14:19:18  charlesr
// Added spaces around header file name to test SMC.
//
// Revision 1.0  2003/12/14 19:11:57  charlesr
// Initial revision
//


#include "AppClass.h"
#include "D:\AutomatoLabs\Test\AppClass_sm.h"
#define _CRT_SECURE_NO_WARNINGS
using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_c Map1::c("Map1::c", 1);
Map1_r Map1::r("Map1::r", 2);
Map1_e Map1::e("Map1::e", 3);
Map1_a Map1::a("Map1::a", 4);
Map1_t Map1::t("Map1::t", 5);
Map1_First_Letter_JNM1 Map1::First_Letter_JNM1("Map1::First_Letter_JNM1", 6);
Map1_space_J Map1::space_J("Map1::space_J", 7);
Map1_j Map1::j("Map1::j", 8);
Map1_o Map1::o("Map1::o", 9);
Map1_i Map1::i("Map1::i", 10);
Map1_n Map1::n("Map1::n", 11);
Map1_Sec_NM Map1::Sec_NM("Map1::Sec_NM", 12);
Map1_First_Letter_JNM2 Map1::First_Letter_JNM2("Map1::First_Letter_JNM2", 13);
Map1_First_Letter_NM Map1::First_Letter_NM("Map1::First_Letter_NM", 14);
Map1_List_Atr Map1::List_Atr("Map1::List_Atr", 15);
Map1_First_Letter_AT Map1::First_Letter_AT("Map1::First_Letter_AT", 16);
Map1_Comma Map1::Comma("Map1::Comma", 17);
Map1_space_NM Map1::space_NM("Map1::space_NM", 18);
Map1_EndBracket Map1::EndBracket("Map1::EndBracket", 19);
Map1_OK Map1::OK("Map1::OK", 20);
Map1_Error Map1::Error("Map1::Error", 21);

void AppClassState::Alth(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Bracket_left(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Bracket_left_q(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Bracket_right(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Bracket_right_q(AppClassContext& context)
{
    Default(context);
}

void AppClassState::EOS(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Letter_a(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Letter_c(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Letter_e(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Letter_i(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Letter_j(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Letter_n(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Letter_o(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Letter_r(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Letter_t(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Num(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Space(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Unknown(AppClassContext& context)
{
    Default(context);
}

void AppClassState::W_Creat(AppClassContext& context)
{
    Default(context);
}

void AppClassState::com(AppClassContext& context)
{
    Default(context);
}

void AppClassState::eps(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void Map1_Default::W_Creat(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::Bracket_left(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::com(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::Num(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::Bracket_right_q(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::Bracket_left_q(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Default::EOS(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Start::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_Start::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Start::Letter_a(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_Start::Letter_c(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::c);
    context.getState().Entry(context);

}

void Map1_Start::Letter_e(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_Start::Letter_i(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_Start::Letter_j(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_Start::Letter_n(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_Start::Letter_o(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_Start::Letter_r(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_Start::Letter_t(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_c::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_c::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_c::Letter_a(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_c::Letter_c(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_c::Letter_e(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_c::Letter_i(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_c::Letter_j(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_c::Letter_n(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_c::Letter_o(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_c::Letter_r(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::r);
    context.getState().Entry(context);

}

void Map1_c::Letter_t(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_r::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_r::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_r::Letter_a(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_r::Letter_c(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_r::Letter_e(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::e);
    context.getState().Entry(context);

}

void Map1_r::Letter_i(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_r::Letter_j(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_r::Letter_n(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_r::Letter_o(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_r::Letter_r(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_r::Letter_t(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_e::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_e::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_e::Letter_a(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::a);
    context.getState().Entry(context);

}

void Map1_e::Letter_c(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_e::Letter_e(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_e::Letter_i(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_e::Letter_j(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_e::Letter_n(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_e::Letter_o(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_e::Letter_r(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_e::Letter_t(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_a::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_a::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_a::Letter_a(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_a::Letter_c(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_a::Letter_e(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_a::Letter_i(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_a::Letter_j(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_a::Letter_n(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_a::Letter_o(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_a::Letter_r(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_a::Letter_t(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::t);
    context.getState().Entry(context);

}

void Map1_t::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_t::Letter_a(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_t::Letter_c(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_t::Letter_e(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_t::Letter_i(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_t::Letter_j(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_t::Letter_n(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_t::Letter_o(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_t::Letter_r(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_t::Letter_t(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM1);
    context.getState().Entry(context);

}

void Map1_t::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::space_NM);
    context.getState().Entry(context);

}

void Map1_First_Letter_JNM1::Alth(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_First_Letter_JNM1::Letter_a(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::Letter_c(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::Letter_e(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::Letter_i(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::Letter_j(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::Letter_n(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::Letter_o(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::Letter_r(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::Letter_t(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::Num(AppClassContext& context)
{


}

void Map1_First_Letter_JNM1::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::space_J);
    context.getState().Entry(context);

}

void Map1_space_J::Letter_j(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::j);
    context.getState().Entry(context);

}

void Map1_j::Letter_o(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::o);
    context.getState().Entry(context);

}

void Map1_o::Letter_i(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::i);
    context.getState().Entry(context);

}

void Map1_i::Letter_n(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::n);
    context.getState().Entry(context);

}

void Map1_n::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Sec_NM);
    context.getState().Entry(context);

}

void Map1_Sec_NM::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_JNM2);
    context.getState().Entry(context);

}

void Map1_First_Letter_JNM2::Alth(AppClassContext& context)
{


}

void Map1_First_Letter_JNM2::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_First_Letter_JNM2::Num(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Alth(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::List_Atr);
    context.getState().Entry(context);

}

void Map1_First_Letter_NM::Letter_a(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Letter_c(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Letter_e(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Letter_i(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Letter_j(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Letter_n(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Letter_o(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Letter_r(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Letter_t(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Num(AppClassContext& context)
{


}

void Map1_First_Letter_NM::com(AppClassContext& context)
{


}

void Map1_List_Atr::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::Bracket_left(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::EndBracket);
    context.getState().Entry(context);

}

void Map1_List_Atr::Letter_a(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::Letter_c(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::Letter_e(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::Letter_i(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::Letter_j(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::Letter_n(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::Letter_o(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::Letter_r(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::Letter_t(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::com(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Comma);
    context.getState().Entry(context);

}

void Map1_First_Letter_AT::Alth(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Bracket_left(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::EndBracket);
    context.getState().Entry(context);

}

void Map1_First_Letter_AT::Letter_a(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Letter_c(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Letter_e(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Letter_i(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Letter_j(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Letter_n(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Letter_o(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Letter_r(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Letter_t(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Num(AppClassContext& context)
{


}

void Map1_First_Letter_AT::com(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Comma);
    context.getState().Entry(context);

}

void Map1_Comma::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Comma::Letter_a(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Comma::Letter_c(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Comma::Letter_e(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Comma::Letter_i(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Comma::Letter_j(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Comma::Letter_n(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Comma::Letter_o(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Comma::Letter_r(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Comma::Letter_t(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_space_NM::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_space_NM::Bracket_left(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_space_NM::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_space_NM::Letter_a(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_space_NM::Letter_c(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_space_NM::Letter_e(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_space_NM::Letter_i(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_space_NM::Letter_j(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_space_NM::Letter_n(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_space_NM::Letter_o(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_space_NM::Letter_r(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_space_NM::Letter_t(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_space_NM::Space(AppClassContext& context)
{


}

void Map1_EndBracket::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_OK::eps(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Start);
    context.getState().Entry(context);

}

void Map1_Error::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    AppClassState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void Map1_Error::eps(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Start);
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
