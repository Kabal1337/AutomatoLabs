//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//


//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s): 
//
// State Map
//	This state map is recognizes the regular expression 0*1*.
//
// RCS ID
// $Id$
//
// CHANGE LOG
// $Log$
// Revision 1.5  2005/05/28 13:31:16  cwrapp
// Updated C++ examples.
//
// Revision 1.1  2005/02/21 14:19:18  charlesr
// Added spaces around header file name to test SMC.
//
// Revision 1.0  2003/12/14 19:11:57  charlesr
// Initial revision
//


#include "AppClass.h"
#include "D:\AutomatoLabs\Test\AppClass_sm.h"
#define _CRT_SECURE_NO_WARNINGS
using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_Creat Map1::Creat("Map1::Creat", 1);
Map1_First_Letter_NM Map1::First_Letter_NM("Map1::First_Letter_NM", 2);
Map1_List_Atr Map1::List_Atr("Map1::List_Atr", 3);
Map1_First_Letter_AT Map1::First_Letter_AT("Map1::First_Letter_AT", 4);
Map1_Comma Map1::Comma("Map1::Comma", 5);
Map1_space Map1::space("Map1::space", 6);
Map1_Space Map1::Space("Map1::Space", 7);
Map1_OK Map1::OK("Map1::OK", 8);
Map1_Error Map1::Error("Map1::Error", 9);

void AppClassState::Alth(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Bracket_left(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Bracket_right(AppClassContext& context)
{
    Default(context);
}

void AppClassState::EOS(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Num(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Space(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Unknown(AppClassContext& context)
{
    Default(context);
}

void AppClassState::W_Creat(AppClassContext& context)
{
    Default(context);
}

void AppClassState::com(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void Map1_Start::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Start::Bracket_left(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Start::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Start::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Start::Num(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Start::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Start::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Start::W_Creat(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Creat);
    context.getState().Entry(context);

}

void Map1_Start::com(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Creat::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_Creat::Bracket_left(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Creat::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::List_Atr);
    context.getState().Entry(context);

}

void Map1_Creat::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Creat::Num(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Creat::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Creat::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Creat::W_Creat(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Creat::com(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_NM);
    context.getState().Entry(context);

}

void Map1_First_Letter_NM::Alth(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Bracket_left(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_First_Letter_NM::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::List_Atr);
    context.getState().Entry(context);

}

void Map1_First_Letter_NM::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_First_Letter_NM::Num(AppClassContext& context)
{


}

void Map1_First_Letter_NM::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_First_Letter_NM::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_First_Letter_NM::W_Creat(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_First_Letter_NM::com(AppClassContext& context)
{


}

void Map1_List_Atr::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_List_Atr::Bracket_left(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_List_Atr::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_List_Atr::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_List_Atr::Num(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_List_Atr::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_List_Atr::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_List_Atr::W_Creat(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_List_Atr::com(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_First_Letter_AT::Alth(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Bracket_left(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_First_Letter_AT::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_First_Letter_AT::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_First_Letter_AT::Num(AppClassContext& context)
{


}

void Map1_First_Letter_AT::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_First_Letter_AT::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_First_Letter_AT::W_Creat(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_First_Letter_AT::com(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Comma);
    context.getState().Entry(context);

}

void Map1_Comma::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Comma::Bracket_left(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Comma::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Comma::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Comma::Num(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Comma::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::space);
    context.getState().Entry(context);

}

void Map1_Comma::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Comma::W_Creat(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Comma::com(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Comma);
    context.getState().Entry(context);

}

void Map1_space::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_space::Bracket_left(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_space::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_space::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_space::Num(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_space::Space(AppClassContext& context)
{


}

void Map1_space::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_space::W_Creat(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_space::com(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Comma);
    context.getState().Entry(context);

}

void Map1_Space::Alth(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::First_Letter_AT);
    context.getState().Entry(context);

}

void Map1_Space::Bracket_left(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Space::Bracket_right(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Space::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::OK);
    }
    catch (...)
    {
        context.setState(Map1::OK);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Space::Num(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Space::Space(AppClassContext& context)
{


}

void Map1_Space::Unknown(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Space::W_Creat(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Error);
    context.getState().Entry(context);

}

void Map1_Space::com(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Comma);
    context.getState().Entry(context);

}

void Map1_Error::Alth(AppClassContext& context)
{


}

void Map1_Error::Bracket_left(AppClassContext& context)
{


}

void Map1_Error::Bracket_right(AppClassContext& context)
{


}

void Map1_Error::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    AppClassState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void Map1_Error::Num(AppClassContext& context)
{


}

void Map1_Error::Space(AppClassContext& context)
{


}

void Map1_Error::Unknown(AppClassContext& context)
{


}

void Map1_Error::W_Creat(AppClassContext& context)
{


}

void Map1_Error::com(AppClassContext& context)
{


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
