//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#ifndef APPCLASS_SM_H
#define APPCLASS_SM_H

#define _CRT_SECURE_NO_WARNINGS
#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class Map1;
class Map1_Start;
class Map1_Creat_Rel;
class Map1_See_Rel;
class Map1_Space_See_Rel;
class Map1_Join;
class Map1_First_Letter_NM;
class Map1_List_Atr;
class Map1_First_Letter_AT;
class Map1_Comma;
class Map1_space_NM;
class Map1_EndBracket;
class Map1_OK;
class Map1_Error;
class Map1_Default;
class AppClassState;
class AppClassContext;
class AppClass;

class AppClassState :
    public statemap::State
{
public:

    AppClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(AppClassContext&) {};
    virtual void Exit(AppClassContext&) {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
    virtual void Bracket_left(AppClassContext& context);
    virtual void Bracket_left_q(AppClassContext& context);
    virtual void Bracket_right(AppClassContext& context);
    virtual void Bracket_right_q(AppClassContext& context);
    virtual void Creat(AppClassContext& context);
    virtual void EOS(AppClassContext& context);
    virtual void EOS(AppClassContext& context, std::string t_string);
    virtual void Num(AppClassContext& context);
    virtual void Space(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);
    virtual void W_Creat(AppClassContext& context);
    virtual void com(AppClassContext& context);
    virtual void eps(AppClassContext& context);

protected:

    virtual void Default(AppClassContext& context);
};

class Map1
{
public:

    static Map1_Start Start;
    static Map1_Creat_Rel Creat_Rel;
    static Map1_See_Rel See_Rel;
    static Map1_Space_See_Rel Space_See_Rel;
    static Map1_Join Join;
    static Map1_First_Letter_NM First_Letter_NM;
    static Map1_List_Atr List_Atr;
    static Map1_First_Letter_AT First_Letter_AT;
    static Map1_Comma Comma;
    static Map1_space_NM space_NM;
    static Map1_EndBracket EndBracket;
    static Map1_OK OK;
    static Map1_Error Error;
};

class Map1_Default :
    public AppClassState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : AppClassState(name, stateId)
    {};

    virtual void W_Creat(AppClassContext& context);
    virtual void Unknown(AppClassContext& context);
    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
    virtual void Bracket_right(AppClassContext& context);
    virtual void Bracket_left(AppClassContext& context);
    virtual void Space(AppClassContext& context);
    virtual void com(AppClassContext& context);
    virtual void Num(AppClassContext& context);
    virtual void Bracket_right_q(AppClassContext& context);
    virtual void Bracket_left_q(AppClassContext& context);
    virtual void Creat(AppClassContext& context);
    virtual void EOS(AppClassContext& context);
};

class Map1_Start :
    public Map1_Default
{
public:
    Map1_Start(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
    virtual void EOS(AppClassContext& context, std::string t_string);
};

class Map1_Creat_Rel :
    public Map1_Default
{
public:
    Map1_Creat_Rel(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
};

class Map1_See_Rel :
    public Map1_Default
{
public:
    Map1_See_Rel(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
    virtual void EOS(AppClassContext& context, std::string t_string);
    virtual void Num(AppClassContext& context);
    virtual void Space(AppClassContext& context);
};

class Map1_Space_See_Rel :
    public Map1_Default
{
public:
    Map1_Space_See_Rel(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
};

class Map1_Join :
    public Map1_Default
{
public:
    Map1_Join(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
    virtual void EOS(AppClassContext& context, std::string t_string);
    virtual void Num(AppClassContext& context);
};

class Map1_First_Letter_NM :
    public Map1_Default
{
public:
    Map1_First_Letter_NM(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
    virtual void Bracket_right(AppClassContext& context);
    virtual void Num(AppClassContext& context);
    virtual void com(AppClassContext& context);
};

class Map1_List_Atr :
    public Map1_Default
{
public:
    Map1_List_Atr(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
    virtual void Bracket_left(AppClassContext& context);
    virtual void com(AppClassContext& context);
};

class Map1_First_Letter_AT :
    public Map1_Default
{
public:
    Map1_First_Letter_AT(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
    virtual void Bracket_left(AppClassContext& context);
    virtual void Num(AppClassContext& context);
    virtual void com(AppClassContext& context);
};

class Map1_Comma :
    public Map1_Default
{
public:
    Map1_Comma(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
};

class Map1_space_NM :
    public Map1_Default
{
public:
    Map1_space_NM(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Alth(AppClassContext& context, std::string t_string1, int& index);
    virtual void Bracket_left(AppClassContext& context);
    virtual void Bracket_right(AppClassContext& context);
    virtual void Space(AppClassContext& context);
};

class Map1_EndBracket :
    public Map1_Default
{
public:
    Map1_EndBracket(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context, std::string t_string);
};

class Map1_OK :
    public Map1_Default
{
public:
    Map1_OK(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void eps(AppClassContext& context);
};

class Map1_Error :
    public Map1_Default
{
public:
    Map1_Error(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void eps(AppClassContext& context);
};

class AppClassContext :
    public statemap::FSMContext
{
public:

    explicit AppClassContext(AppClass& owner)
    : FSMContext(Map1::Start),
      _owner(owner)
    {};

    AppClassContext(AppClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline AppClass& getOwner()
    {
        return (_owner);
    };

    inline AppClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<AppClassState&>(*_state);
    };

    inline void Alth(std::string t_string1, int& index)
    {
        getState().Alth(*this, t_string1, index);
    };

    inline void Bracket_left()
    {
        getState().Bracket_left(*this);
    };

    inline void Bracket_left_q()
    {
        getState().Bracket_left_q(*this);
    };

    inline void Bracket_right()
    {
        getState().Bracket_right(*this);
    };

    inline void Bracket_right_q()
    {
        getState().Bracket_right_q(*this);
    };

    inline void Creat()
    {
        getState().Creat(*this);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void EOS(std::string t_string)
    {
        getState().EOS(*this, t_string);
    };

    inline void Num()
    {
        getState().Num(*this);
    };

    inline void Space()
    {
        getState().Space(*this);
    };

    inline void Unknown()
    {
        getState().Unknown(*this);
    };

    inline void W_Creat()
    {
        getState().W_Creat(*this);
    };

    inline void com()
    {
        getState().com(*this);
    };

    inline void eps()
    {
        getState().eps(*this);
    };

private:
    AppClass& _owner;
};


#endif // APPCLASS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
